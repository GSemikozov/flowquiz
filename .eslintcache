[{"/Users/herman/flowquiz/src/features/quiz-navigation/quizNavigationSlice.ts":"1","/Users/herman/flowquiz/src/features/quiz-list/QuizItemEditableOption.tsx":"2","/Users/herman/flowquiz/src/features/quiz-list/quizListSlice.ts":"3","/Users/herman/flowquiz/src/App.tsx":"4","/Users/herman/flowquiz/src/features/quiz-list/QuizItemsList.tsx":"5","/Users/herman/flowquiz/src/features/quiz-list/QuizItem.tsx":"6","/Users/herman/flowquiz/src/index.tsx":"7","/Users/herman/flowquiz/src/features/filestack/helpers.ts":"8","/Users/herman/flowquiz/src/features/filestack/useFilestack.ts":"9","/Users/herman/flowquiz/src/services/sentry/sentry.ts":"10","/Users/herman/flowquiz/src/features/quiz-settings/quizSettingsSlice.ts":"11","/Users/herman/flowquiz/src/features/quiz-list/QuizItemEditableOptions.tsx":"12","/Users/herman/flowquiz/src/serviceWorker.ts":"13","/Users/herman/flowquiz/src/features/quiz-list/QuizItemEditableInput.tsx":"14","/Users/herman/flowquiz/src/hooks/useEditableText.ts":"15","/Users/herman/flowquiz/src/components/Navbar/Navbar.tsx":"16","/Users/herman/flowquiz/src/features/filestack/Filestack.tsx":"17","/Users/herman/flowquiz/src/features/quiz-list/QuizListItemEditableTitle.tsx":"18","/Users/herman/flowquiz/src/features/filestack/filestackSlice.ts":"19"},{"size":578,"mtime":1616327379689,"results":"20","hashOfConfig":"21"},{"size":12013,"mtime":1617020536893,"results":"22","hashOfConfig":"21"},{"size":13410,"mtime":1616970121694,"results":"23","hashOfConfig":"21"},{"size":10365,"mtime":1617020495069,"results":"24","hashOfConfig":"21"},{"size":1047,"mtime":1616965561018,"results":"25","hashOfConfig":"21"},{"size":5395,"mtime":1617020422604,"results":"26","hashOfConfig":"21"},{"size":1608,"mtime":1616483013212,"results":"27","hashOfConfig":"21"},{"size":387,"mtime":1611611623315,"results":"28","hashOfConfig":"21"},{"size":3988,"mtime":1616736270427,"results":"29","hashOfConfig":"21"},{"size":728,"mtime":1611611623317,"results":"30","hashOfConfig":"21"},{"size":388,"mtime":1616327379689,"results":"31","hashOfConfig":"21"},{"size":3650,"mtime":1617020356528,"results":"32","hashOfConfig":"21"},{"size":5424,"mtime":1607028045529,"results":"33","hashOfConfig":"21"},{"size":2196,"mtime":1616961238445,"results":"34","hashOfConfig":"21"},{"size":1146,"mtime":1616327379691,"results":"35","hashOfConfig":"21"},{"size":993,"mtime":1616663409068,"results":"36","hashOfConfig":"21"},{"size":4721,"mtime":1617020441036,"results":"37","hashOfConfig":"21"},{"size":1907,"mtime":1616742138730,"results":"38","hashOfConfig":"21"},{"size":1577,"mtime":1616740652930,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"at2kyv",{"filePath":"44","messages":"45","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/herman/flowquiz/src/features/quiz-navigation/quizNavigationSlice.ts",["88"],"import { createSlice, createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\n\nconst initialState = {\n    activeTabId: 1,\n};\n\nconst quizNavigationSlice = createSlice({\n    name: \"quizNavigation\",\n    initialState: initialState,\n    reducers: {\n        setActiveTab(state, action) {\n            state.activeTabId = action.payload;\n        },\n    },\n});\n\nexport const { setActiveTab } = quizNavigationSlice.actions;\n\nexport const selectActiveTab = (state: RootState) => state.quizNavigation.activeTabId;\n\nexport default quizNavigationSlice.reducer;\n",["89","90"],"/Users/herman/flowquiz/src/features/quiz-list/QuizItemEditableOption.tsx",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"/Users/herman/flowquiz/src/features/quiz-list/quizListSlice.ts",["113"],"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\nimport { quizListType } from \"./types\";\nimport { getUuid } from \"../../helpers\";\n\nconst initialState = {\n    quizList: [\n        {\n            id: \"5d23aae4-f7f9-4683-9db5-868435452779\",\n            title: {\n                text: \"Title 1\",\n                isVisible: true,\n            },\n            description: \"\",\n            description2: \"\",\n            imageUrl: \"\",\n            isActive: false,\n            completed: false,\n            questions: [\n                {\n                    id: \"5cba\",\n                    title: \"Option\",\n                    answer: \"\",\n                    isOpen: false,\n                    isTrue: false,\n                },\n            ],\n        },\n        {\n            id: \"5d23aae4-f7f9-4683-9db5-868435452780\",\n            title: {\n                text: \"Title 2\",\n                isVisible: true,\n            },\n            description: \"\",\n            description2: \"\",\n            imageUrl: \"\",\n            isActive: false,\n            completed: false,\n            questions: [\n                {\n                    id: \"5abc\",\n                    title: \"Option\",\n                    answer: \"\",\n                    isOpen: false,\n                    isTrue: false,\n                },\n            ],\n        },\n    ],\n};\n\nconst getDummyListItem = () => {\n    return {\n        id: getUuid(),\n        title: {\n            text: \"Title\",\n            isVisible: true,\n        },\n        description: \"\",\n        description2: \"\",\n        imageUrl: \"\",\n        isActive: false,\n        completed: false,\n        questions: [\n            {\n                id: getUuid(),\n                title: \"Option\",\n                answer: \"\",\n                isOpen: false,\n                isTrue: false,\n            },\n        ],\n    };\n};\n\nconst getQuestion = ({\n    state,\n    quizListItemId,\n    questionId,\n}: {\n    state: any;\n    quizListItemId: number;\n    questionId: number;\n}) => {\n    const item = state.quizList.find((item: any) => item.id === quizListItemId);\n    return item.questions.find((question: any) => question.id === questionId);\n};\n\nconst quizListSlice = createSlice({\n    name: \"quizList\",\n    initialState: initialState,\n    reducers: {\n        addNewQuizListItem(state) {\n            // reducer(state, action) {\n            //     const { id } = action.payload\n            // },\n            // @ts-ignore\n            // prepare() {\n            //     return { payload: { id: Date.now() } }\n            // }\n            // @ts-ignore\n            state.quizList.push(getDummyListItem());\n        },\n        updateQuizListItem(state, action) {\n            const { id, title, completed, questions } = action.payload;\n            // @ts-ignore\n            state.quizList.push({ id, title, completed, questions });\n        },\n        updateQuizListItemTitle(state, action) {\n            const { title, quizListItemId } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n\n            if (item) {\n                // @ts-ignore\n                item.title.text = title;\n            }\n        },\n        toggleTitle(state, action) {\n            const quizListItemId = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n\n            if (item) {\n                // @ts-ignore\n                item.title.isVisible = !item.title.isVisible;\n            }\n        },\n        updateQuizListItemDescription(state, action) {\n            const { description, quizListItemId } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n\n            if (item) {\n                // @ts-ignore\n                item.description = description;\n            }\n        },\n        updateQuizListItemDescription2(state, action) {\n            const { description2, quizListItemId } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n\n            if (item) {\n                // @ts-ignore\n                item.description2 = description2;\n            }\n        },\n        updateQuizListItemImg(state, action) {\n            const { imageUrl, quizListItemId } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n            console.log(\"updateQuizListItem img\", imageUrl, quizListItemId, item);\n            if (item) {\n                // @ts-ignore\n                item.imageUrl = imageUrl;\n            }\n        },\n        removeQuizListItemImg(state, action) {\n            const { quizListItemId } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n            console.log(\"REMOVE img\", quizListItemId, item);\n            if (item) {\n                // @ts-ignore\n                item.imageUrl = \"\";\n            }\n        },\n        toggleQuizListItem(state, action) {\n            // @ts-ignore\n            const item = state.quizList.find((item) => item.id === action.payload);\n            if (item) {\n                // @ts-ignore\n                item.completed = !item.completed;\n            }\n        },\n        postQuizList(state, action) {\n            state.quizList = action.payload;\n        },\n        addQuestionsListOption(state, action) {\n            const item = state.quizList.find((item) => item.id === action.payload.quizListItemId);\n\n            if (item) {\n                // @ts-ignore\n                item.questions.push(action.payload.quizListItemOption);\n            }\n        },\n        removeQuestionsListOption(state, action) {\n            const item = state.quizList.find((item) => item.id === action.payload.quizListItemId);\n\n            if (item) {\n                // @ts-ignore\n                item.questions = item.questions.filter(\n                    (question) => question.id !== action.payload.questionId,\n                );\n            }\n        },\n        toggleQuestionsListOption(state, action) {\n            // @ts-ignore\n            const item = state.quizList.find((item) => item.id === action.payload.quizListItemId);\n            const question =\n                item &&\n                getQuestion({\n                    ...state,\n                    ...action.payload.quizListItemId,\n                    ...action.payload.questionId,\n                });\n\n            if (question) {\n                // @ts-ignore\n                question.isTrue = !item.isTrue;\n            }\n        },\n        updateQuestionsListOption(state, action) {\n            const { quizListItemId, questionId, title, isTrue, answer } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n            const question = item && getQuestion({ ...state, ...quizListItemId, ...questionId });\n\n            if (question) {\n                // @ts-ignore\n                question.push({ id, title, isTrue, answer });\n                // return state.map(todo =>\n                //     todo.id === action.id ?\n                //         { ...todo, text: action.text } :\n                //         todo\n                // )\n            }\n        },\n        updateQuestionsOptionAnswer(state, action) {\n            const { quizListItemId, questionId, answer } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n            const question = item && getQuestion({ state, quizListItemId, questionId });\n\n            if (question) {\n                // @ts-ignore\n                question.answer = answer;\n            }\n        },\n        updateQuestionsListOptionTitle(state, action) {\n            const { quizListItemId, questionId, title } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n            const question = item && getQuestion({ state, quizListItemId, questionId });\n\n            if (question) {\n                // @ts-ignore\n                question.title = title;\n            }\n        },\n        toggleQuestionsListOptionChecked(state, action) {\n            const { quizListItemId, questionId } = action.payload;\n            const item = state.quizList.find((item) => item.id === quizListItemId);\n\n            item &&\n                item.questions.map((question) => {\n                    if (question.id === questionId) {\n                        return (question.isTrue = !question.isTrue);\n                    } else {\n                        return (question.isTrue = false);\n                    }\n                });\n        },\n        openAllAnswerFields(state, action) {\n            // const { quizListItemId } = action.payload;\n            // const item = state.quizList.find((item) => item.id === quizListItemId);\n\n            // if (item) {\n            //     return item.questions.map((question) => (question.isOpen = true));\n            // }\n\n            state.quizList.map((item) => {\n                const modifiedItem =\n                    item.id === action.payload &&\n                    item.questions.map((question) => (question.isOpen = true));\n\n                if (modifiedItem) {\n                    return {\n                        ...modifiedItem,\n                    };\n                } else {\n                    return {\n                        ...item,\n                    };\n                }\n            });\n        },\n        closeAllAnswerFields(state, action) {\n            const item = state.quizList.find((item) => item.id === action.payload);\n            console.log(\"REDUCER closeAllAnswerFields payload\", JSON.stringify(item));\n\n            item &&\n                item.questions.map((question) => {\n                    return (question.isOpen = false);\n                });\n        },\n        closeTotallyAllAnswerFields(state) {\n            state.quizList.map((item) => {\n                item.questions.map((question) => {\n                    return (question.isOpen = false);\n                });\n            });\n        },\n        setListItemActive(state, action) {\n            const activeItem = state.quizList.find((item) => item.id === action.payload);\n\n            if (activeItem) {\n                activeItem.isActive = true;\n            }\n        },\n    },\n});\n\nexport const {\n    addNewQuizListItem,\n    updateQuizListItem,\n    toggleQuizListItem,\n    updateQuizListItemTitle,\n    updateQuizListItemDescription,\n    updateQuizListItemDescription2,\n    updateQuizListItemImg,\n    removeQuizListItemImg,\n    postQuizList,\n    addQuestionsListOption,\n    removeQuestionsListOption,\n    toggleQuestionsListOption,\n    updateQuestionsListOption,\n    updateQuestionsOptionAnswer,\n    updateQuestionsListOptionTitle,\n    toggleQuestionsListOptionChecked,\n    openAllAnswerFields,\n    closeAllAnswerFields,\n    closeTotallyAllAnswerFields,\n    setListItemActive,\n    toggleTitle,\n} = quizListSlice.actions;\n\nexport const quizListPostAsync = (quizList: quizListType): AppThunk => (dispatch) => {\n    setTimeout(() => {\n        dispatch(postQuizList(quizList));\n        window.localStorage.setItem(\"quizList\", JSON.stringify(quizList)); // TODO: save to DB instead of localStorage\n    }, 1000);\n};\n\nexport const getListSelector = (state: RootState) => {\n    const data = JSON.parse(window.localStorage.getItem(\"quizList\") || \"{}\");\n    const res = state.quizList || data?.quizList;\n    return res.quizList;\n};\n\nexport const getCurrentListItemSelector = (id: string) =>\n    createSelector(getListSelector, (list) => list.find((item) => item.id === id));\n\nexport const getCurrentListItemOptionsSelector = (quizQuestionId: string) =>\n    createSelector(getListSelector, (list) => list.find((item) => item.id === quizQuestionId));\n\nexport const getCurrentListItemOptionsStatusSelector = (\n    quizListItemId: string,\n    quizQuestionId: string,\n) =>\n    createSelector(getListSelector, (list) => {\n        const item = list.find((item) => item.id === quizListItemId);\n        const question = item?.questions.find((question) => question.id === quizQuestionId);\n        return question && question.isTrue;\n    });\n\nexport const getCurrentListItemOptionsOpenAnswerSelector = (\n    quizListItemId: string,\n    quizQuestionId: string,\n) =>\n    createSelector(getListSelector, (list) => {\n        const item = list.find((item) => item.id === quizListItemId);\n        const question = item?.questions.find((question) => question.id === quizQuestionId);\n        console.log(\n            \"From selector check if ANSWER open\",\n            question?.isOpen,\n            \"quizListItemId: \",\n            quizListItemId,\n            \"quizQuestionId: \",\n            quizQuestionId,\n        );\n        return !!question?.isOpen;\n    });\n\nexport const getCurrentListItemOptionsAnswerStatusSelector = (\n    quizListItemId: string,\n    quizQuestionId: string,\n) =>\n    createSelector(getListSelector, (list) => {\n        const item = list.find((item) => item.id === quizListItemId);\n        const question = item?.questions.find((question) => question.id === quizQuestionId);\n        return question ? question.isTrue : false;\n    });\n\nexport const getCurrentListItemIdSelector = (state: RootState, quizQuestionId: number) =>\n    createSelector(getListSelector, (list) => {\n        // list.filter(item => item.id === quizQuestionId)[0].id\n    });\n\nexport default quizListSlice.reducer;\n","/Users/herman/flowquiz/src/App.tsx",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"/Users/herman/flowquiz/src/features/quiz-list/QuizItemsList.tsx",["132"],"/Users/herman/flowquiz/src/features/quiz-list/QuizItem.tsx",["133","134","135","136","137"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { quizListItemType } from \"./types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, CardHeader, IconButton, TextareaAutosize } from \"@material-ui/core\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { QuizListItemEditableTitle } from \"./QuizListItemEditableTitle\";\nimport { QuizItemEditableOptions } from \"./QuizItemEditableOptions\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\nimport {\n    getCurrentListItemSelector,\n    updateQuizListItemDescription,\n    updateQuizListItemDescription2,\n} from \"./quizListSlice\";\n\nexport type ClickType = {\n    onClick: () => { payload: any; type: string };\n};\n\nconst useStyles = makeStyles((theme) => ({\n    cardContent: {\n        padding: 0,\n        \"&:last-child\": {\n            padding: 0,\n        },\n    },\n    cardHeader: {\n        paddingBottom: 0,\n    },\n}));\n\nexport const QuizItem = ({\n    onClick,\n    id,\n    title,\n    completed,\n    questions,\n}: ClickType & quizListItemType) => {\n    const classes = useStyles();\n    const item = useSelector(getCurrentListItemSelector(id));\n\n    const [description, setDescription] = useState(item?.description || \"\");\n    const [description2, setDescription2] = useState(item?.description2 || \"\");\n\n    const isTitleVisible = title.isVisible;\n    const isImg = !!item?.imageUrl;\n\n    const dispatch = useDispatch();\n\n    const handleDescriptionChange = useCallback(\n        (e) => {\n            setDescription(() => e.target.value);\n            dispatch(\n                updateQuizListItemDescription({\n                    description: description,\n                    quizListItemId: id,\n                }),\n            );\n        },\n        [dispatch, id, description, setDescription],\n    );\n\n    const handleDescription2Change = useCallback(\n        (e) => {\n            setDescription2(() => e.target.value);\n            dispatch(\n                updateQuizListItemDescription2({\n                    description2: description2,\n                    quizListItemId: id,\n                }),\n            );\n        },\n        [dispatch, id, description, setDescription],\n    );\n\n    useEffect(() => {\n        console.log(\"isTitleVisible updated\", isTitleVisible);\n    }, [isTitleVisible]);\n\n    return (\n        <div style={{ marginBottom: \"40px\" }}>\n            <div style={{ textAlign: \"left\" }}>\n                <Card>\n                    <CardContent className={classes.cardContent}>\n                        {isImg && (\n                            <img\n                                src={item?.imageUrl}\n                                style={{\n                                    maxWidth: \"100%\",\n                                    maxHeight: \"300px\",\n                                    display: \"block\",\n                                    margin: \"16px auto\",\n                                    borderRadius: \"5px\",\n                                    overflow: \"hidden\",\n                                }}\n                                alt=\"img\"\n                            />\n                        )}\n                        {isTitleVisible && <QuizListItemEditableTitle title={title.text} id={id} />}\n                        <div style={{ padding: \"0 10px\" }}>\n                            <TextareaAutosize\n                                style={{\n                                    width: \"100%\",\n                                    padding: \"10px\",\n                                    boxSizing: \"border-box\",\n                                    fontSize: \"16px\",\n                                    color: \"initial\",\n                                    border: \"none\",\n                                    outline: \"none\",\n                                    resize: \"none\",\n                                }}\n                                aria-label=\"minimum height\"\n                                rowsMin={1}\n                                rowsMax={5}\n                                placeholder=\"Your answer\"\n                                value={description}\n                                onChange={(e) => handleDescriptionChange(e)}\n                            />\n                        </div>\n                        <div style={{ padding: \"0 10px\" }}>\n                            <TextareaAutosize\n                                style={{\n                                    width: \"100%\",\n                                    padding: \"10px\",\n                                    boxSizing: \"border-box\",\n                                    fontSize: \"16px\",\n                                    border: \"none\",\n                                    outline: \"none\",\n                                    resize: \"none\",\n                                }}\n                                aria-label=\"minimum height\"\n                                rowsMin={1}\n                                rowsMax={5}\n                                placeholder=\"Description here (optional)\"\n                                value={description2}\n                                onChange={(e) => handleDescription2Change(e)}\n                            />\n                        </div>\n                        <QuizItemEditableOptions id={id} />\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    );\n};\n","/Users/herman/flowquiz/src/index.tsx",["138"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initSentry } from \"./services/sentry/sentry\";\nimport { SnackbarProvider } from \"notistack\";\nimport {BrowserRouter, Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport { Navbar } from \"./components/Navbar/Navbar\";\n\ninitSentry({\n    dsn: \"https://ddb501c2d40e4a55842b80dc677ec4fa@o508217.ingest.sentry.io/5600418\",\n}); // TODO: state.app.config.sentry - put dsn and env there\n\nReactDOM.render(\n    <Provider store={store}>\n        <SnackbarProvider maxSnack={3}>\n            <BrowserRouter>\n                <Navbar />\n                <Switch>\n                    <Route exact={true} path=\"/edit/:id\">\n                        <App />\n                    </Route>\n                    <Route exact={true} path=\"/\">\n                        <div style={{marginTop: \"100px\", textAlign: \"center\"}}>Home</div>\n                    </Route>\n                    <Route exact={false} path=\"/\">\n                        <Redirect to=\"/\" />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </SnackbarProvider>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["139","140"],"/Users/herman/flowquiz/src/features/filestack/helpers.ts",[],"/Users/herman/flowquiz/src/features/filestack/useFilestack.ts",[],"/Users/herman/flowquiz/src/services/sentry/sentry.ts",[],"/Users/herman/flowquiz/src/features/quiz-settings/quizSettingsSlice.ts",["141"],"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    quizList: [],\n};\n\nconst quizSettingsSlice = createSlice({\n    name: \"quizList\",\n    initialState: initialState,\n    reducers: {\n        openAllAnswerFields(state, action) {},\n    },\n});\n\nexport const { openAllAnswerFields } = quizSettingsSlice.actions;\n\nexport default quizSettingsSlice.reducer;\n",["142","143"],"/Users/herman/flowquiz/src/features/quiz-list/QuizItemEditableOptions.tsx",["144","145","146","147","148","149"],"/Users/herman/flowquiz/src/serviceWorker.ts",[],["150","151"],"/Users/herman/flowquiz/src/features/quiz-list/QuizItemEditableInput.tsx",["152"],"import React, { Dispatch, SetStateAction, useRef } from \"react\";\nimport { useEditableText } from \"../../hooks/useEditableText\";\nimport debounce from \"lodash.debounce\";\nimport { InputBase } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        minWidth: 240,\n        maxWidth: \"100%\",\n        color: \"black\",\n        opacity: 1,\n        borderBottom: 0,\n        boxSizing: \"border-box\",\n        \"&:before\": {\n            borderBottom: \"0 !important\",\n        },\n    },\n}));\n\nexport const QuizItemEditableInput = ({\n    name,\n    title,\n    saveToDb,\n    onPressEnter,\n    onPressBackspace,\n}: {\n    name: string;\n    title: string;\n    saveToDb: Dispatch<SetStateAction<string>>;\n    onPressEnter: () => void;\n    onPressBackspace: () => void;\n}) => {\n    const classes = useStyles();\n    const { handleChange, toggleEditMode, editMode, text } = useEditableText(title);\n\n    const debouncedSave = useRef(\n        debounce((nextValue: string) => {\n            saveToDb(nextValue);\n        }, 500),\n    ).current;\n\n    const handleOnChange = (event: any) => {\n        const { value: nextValue } = event.target;\n        handleChange(event);\n        debouncedSave(nextValue);\n    };\n\n    // useEffect(() => {\n    //     console.log(\"editMode rendered\", editMode);\n    // }, [editMode])\n\n    return (\n        <InputBase\n            autoFocus\n            name={name}\n            defaultValue={title}\n            // error={text === \"\"}\n            onChange={(e) => {\n                handleOnChange(e);\n            }}\n            onKeyPress={(e) => {\n                if (e.key === \"Enter\") {\n                    onPressEnter();\n                }\n            }}\n            onKeyDown={(e) => {\n                if (e.key === \"Backspace\" && text === \"\") {\n                    onPressBackspace();\n                }\n            }}\n            // disabled={!editMode}\n            className={classes.textField}\n            // onMouseEnter={() => handleMouseOver()}\n            onMouseLeave={() => toggleEditMode()}\n            onDoubleClick={() => toggleEditMode()}\n            fullWidth={true}\n        />\n    );\n};\n","/Users/herman/flowquiz/src/hooks/useEditableText.ts",[],"/Users/herman/flowquiz/src/components/Navbar/Navbar.tsx",[],"/Users/herman/flowquiz/src/features/filestack/Filestack.tsx",["153","154"],"/Users/herman/flowquiz/src/features/quiz-list/QuizListItemEditableTitle.tsx",[],"/Users/herman/flowquiz/src/features/filestack/filestackSlice.ts",["155"],{"ruleId":"156","severity":1,"message":"157","line":1,"column":23,"nodeType":"158","messageId":"159","endLine":1,"endColumn":37},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"156","severity":1,"message":"164","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":22},{"ruleId":"156","severity":1,"message":"165","line":8,"column":5,"nodeType":"158","messageId":"159","endLine":8,"endColumn":44},{"ruleId":"156","severity":1,"message":"166","line":11,"column":5,"nodeType":"158","messageId":"159","endLine":11,"endColumn":24},{"ruleId":"156","severity":1,"message":"167","line":12,"column":5,"nodeType":"158","messageId":"159","endLine":12,"endColumn":25},{"ruleId":"156","severity":1,"message":"168","line":13,"column":5,"nodeType":"158","messageId":"159","endLine":13,"endColumn":32},{"ruleId":"156","severity":1,"message":"169","line":16,"column":5,"nodeType":"158","messageId":"159","endLine":16,"endColumn":31},{"ruleId":"156","severity":1,"message":"170","line":25,"column":5,"nodeType":"158","messageId":"159","endLine":25,"endColumn":9},{"ruleId":"156","severity":1,"message":"171","line":30,"column":5,"nodeType":"158","messageId":"159","endLine":30,"endColumn":18},{"ruleId":"156","severity":1,"message":"172","line":38,"column":36,"nodeType":"158","messageId":"159","endLine":38,"endColumn":44},{"ruleId":"156","severity":1,"message":"173","line":46,"column":8,"nodeType":"158","messageId":"159","endLine":46,"endColumn":26},{"ruleId":"156","severity":1,"message":"174","line":48,"column":10,"nodeType":"158","messageId":"159","endLine":48,"endColumn":24},{"ruleId":"156","severity":1,"message":"175","line":49,"column":8,"nodeType":"158","messageId":"159","endLine":49,"endColumn":18},{"ruleId":"156","severity":1,"message":"176","line":50,"column":10,"nodeType":"158","messageId":"159","endLine":50,"endColumn":15},{"ruleId":"156","severity":1,"message":"177","line":50,"column":17,"nodeType":"158","messageId":"159","endLine":50,"endColumn":21},{"ruleId":"156","severity":1,"message":"178","line":50,"column":23,"nodeType":"158","messageId":"159","endLine":50,"endColumn":29},{"ruleId":"156","severity":1,"message":"179","line":51,"column":10,"nodeType":"158","messageId":"159","endLine":51,"endColumn":19},{"ruleId":"156","severity":1,"message":"180","line":146,"column":7,"nodeType":"158","messageId":"159","endLine":146,"endColumn":16},{"ruleId":"156","severity":1,"message":"181","line":178,"column":12,"nodeType":"158","messageId":"159","endLine":178,"endColumn":19},{"ruleId":"156","severity":1,"message":"182","line":229,"column":12,"nodeType":"158","messageId":"159","endLine":229,"endColumn":20},{"ruleId":"156","severity":1,"message":"183","line":229,"column":22,"nodeType":"158","messageId":"159","endLine":229,"endColumn":33},{"ruleId":"184","severity":1,"message":"185","line":268,"column":8,"nodeType":"186","endLine":268,"endColumn":42,"suggestions":"187"},{"ruleId":"184","severity":1,"message":"188","line":285,"column":8,"nodeType":"186","endLine":285,"endColumn":30,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":291,"column":39,"nodeType":"192","messageId":"193","endLine":291,"endColumn":41},{"ruleId":"156","severity":1,"message":"194","line":1,"column":47,"nodeType":"158","messageId":"159","endLine":1,"endColumn":54},{"ruleId":"156","severity":1,"message":"195","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":13},{"ruleId":"156","severity":1,"message":"196","line":8,"column":22,"nodeType":"158","messageId":"159","endLine":8,"endColumn":30},{"ruleId":"156","severity":1,"message":"197","line":13,"column":5,"nodeType":"158","messageId":"159","endLine":13,"endColumn":16},{"ruleId":"156","severity":1,"message":"198","line":14,"column":5,"nodeType":"158","messageId":"159","endLine":14,"endColumn":21},{"ruleId":"156","severity":1,"message":"199","line":15,"column":5,"nodeType":"158","messageId":"159","endLine":15,"endColumn":14},{"ruleId":"156","severity":1,"message":"200","line":19,"column":5,"nodeType":"158","messageId":"159","endLine":19,"endColumn":17},{"ruleId":"156","severity":1,"message":"201","line":24,"column":5,"nodeType":"158","messageId":"159","endLine":24,"endColumn":8},{"ruleId":"156","severity":1,"message":"202","line":25,"column":5,"nodeType":"158","messageId":"159","endLine":25,"endColumn":9},{"ruleId":"156","severity":1,"message":"203","line":26,"column":5,"nodeType":"158","messageId":"159","endLine":26,"endColumn":15},{"ruleId":"156","severity":1,"message":"172","line":29,"column":36,"nodeType":"158","messageId":"159","endLine":29,"endColumn":44},{"ruleId":"156","severity":1,"message":"204","line":35,"column":5,"nodeType":"158","messageId":"159","endLine":35,"endColumn":22},{"ruleId":"156","severity":1,"message":"174","line":39,"column":17,"nodeType":"158","messageId":"159","endLine":39,"endColumn":31},{"ruleId":"156","severity":1,"message":"182","line":95,"column":11,"nodeType":"158","messageId":"159","endLine":95,"endColumn":19},{"ruleId":"184","severity":1,"message":"205","line":111,"column":8,"nodeType":"186","endLine":111,"endColumn":17,"suggestions":"206"},{"ruleId":"156","severity":1,"message":"207","line":134,"column":11,"nodeType":"158","messageId":"159","endLine":134,"endColumn":18},{"ruleId":"156","severity":1,"message":"208","line":137,"column":11,"nodeType":"158","messageId":"159","endLine":137,"endColumn":15},{"ruleId":"184","severity":1,"message":"209","line":183,"column":8,"nodeType":"186","endLine":183,"endColumn":10,"suggestions":"210"},{"ruleId":"156","severity":1,"message":"211","line":13,"column":12,"nodeType":"158","messageId":"159","endLine":13,"endColumn":20},{"ruleId":"156","severity":1,"message":"212","line":4,"column":29,"nodeType":"158","messageId":"159","endLine":4,"endColumn":39},{"ruleId":"156","severity":1,"message":"213","line":4,"column":41,"nodeType":"158","messageId":"159","endLine":4,"endColumn":51},{"ruleId":"156","severity":1,"message":"214","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":17},{"ruleId":"156","severity":1,"message":"172","line":8,"column":36,"nodeType":"158","messageId":"159","endLine":8,"endColumn":44},{"ruleId":"184","severity":1,"message":"215","line":72,"column":9,"nodeType":"186","endLine":72,"endColumn":52,"suggestions":"216"},{"ruleId":"156","severity":1,"message":"217","line":11,"column":24,"nodeType":"158","messageId":"159","endLine":11,"endColumn":28},{"ruleId":"160","replacedBy":"218"},{"ruleId":"162","replacedBy":"219"},{"ruleId":"156","severity":1,"message":"157","line":1,"column":10,"nodeType":"158","messageId":"159","endLine":1,"endColumn":24},{"ruleId":"160","replacedBy":"220"},{"ruleId":"162","replacedBy":"221"},{"ruleId":"156","severity":1,"message":"222","line":6,"column":5,"nodeType":"158","messageId":"159","endLine":6,"endColumn":9},{"ruleId":"156","severity":1,"message":"223","line":13,"column":5,"nodeType":"158","messageId":"159","endLine":13,"endColumn":14},{"ruleId":"156","severity":1,"message":"224","line":20,"column":8,"nodeType":"158","messageId":"159","endLine":20,"endColumn":32},{"ruleId":"156","severity":1,"message":"225","line":43,"column":11,"nodeType":"158","messageId":"159","endLine":43,"endColumn":16},{"ruleId":"156","severity":1,"message":"226","line":45,"column":12,"nodeType":"158","messageId":"159","endLine":45,"endColumn":17},{"ruleId":"184","severity":1,"message":"227","line":77,"column":8,"nodeType":"186","endLine":77,"endColumn":12,"suggestions":"228"},{"ruleId":"160","replacedBy":"229"},{"ruleId":"162","replacedBy":"230"},{"ruleId":"156","severity":1,"message":"231","line":35,"column":43,"nodeType":"158","messageId":"159","endLine":35,"endColumn":51},{"ruleId":"184","severity":1,"message":"232","line":72,"column":9,"nodeType":"186","endLine":72,"endColumn":62,"suggestions":"233"},{"ruleId":"184","severity":1,"message":"234","line":118,"column":13,"nodeType":"186","endLine":118,"endColumn":44,"suggestions":"235"},{"ruleId":"156","severity":1,"message":"236","line":2,"column":20,"nodeType":"158","messageId":"159","endLine":2,"endColumn":29},"@typescript-eslint/no-unused-vars","'createSelector' is defined but never used.","Identifier","unusedVar","no-native-reassign",["237"],"no-negated-in-lhs",["238"],"'Props' is defined but never used.","'getCurrentListItemOptionsStatusSelector' is defined but never used.","'openAllAnswerFields' is defined but never used.","'closeAllAnswerFields' is defined but never used.","'closeTotallyAllAnswerFields' is defined but never used.","'getCurrentListItemSelector' is defined but never used.","'List' is defined but never used.","'ListSubheader' is defined but never used.","'useStore' is defined but never used.","'QuestionAnswerIcon' is defined but never used.","'QuestionAnswer' is defined but never used.","'withStyles' is defined but never used.","'green' is defined but never used.","'grey' is defined but never used.","'purple' is defined but never used.","'useParams' is defined but never used.","'IOSSwitch' is assigned a value but never used.","'checked' is assigned a value but never used.","'isOpened' is assigned a value but never used.","'setIsOpened' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'currentItemOptions'. Either include it or remove the dependency array.","ArrayExpression",["239"],"React Hook useCallback has a missing dependency: 'currentItemOptions?.questions'. Either include it or remove the dependency array.",["240"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useMemo' is defined but never used.","'Paper' is defined but never used.","'useTheme' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'ListItemIcon' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'Typography' is defined but never used.","'quizListPostAsync' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["241"],"'classes' is assigned a value but never used.","'list' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["242"],"'quizItem' is assigned a value but never used.","'CardHeader' is defined but never used.","'IconButton' is defined but never used.","'ImageIcon' is defined but never used.","React Hook useCallback has a missing dependency: 'description2'. Either include it or remove the dependency array.",["243"],"'Link' is defined but never used.",["237"],["238"],["237"],["238"],"'Grid' is defined but never used.","'TextField' is defined but never used.","'RadioButtonUncheckedIcon' is defined but never used.","'store' is assigned a value but never used.","'value' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["244"],["237"],["238"],"'editMode' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'listItemId'. Either include it or remove the dependency array.",["245"],"React Hook useMemo has unnecessary dependencies: 'currentImageUrl' and 'uploadedFile'. Either exclude them or remove the dependency array. Outer scope values like 'uploadedFile' aren't valid dependencies because mutating them doesn't re-render the component.",["246"],"'RootState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"253","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},"Update the dependencies array to be: [currentItemOptions, dispatch, quizListId, questionId]",{"range":"262","text":"263"},"Update the dependencies array to be: [currentItemOptions?.questions, dispatch, quizListId]",{"range":"264","text":"265"},"Update the dependencies array to be: [checked, dispatch, id]",{"range":"266","text":"267"},"Update the dependencies array to be: [dispatch, id]",{"range":"268","text":"269"},"Update the dependencies array to be: [dispatch, description2, id]",{"range":"270","text":"271"},{"range":"272","text":"269"},"Update the dependencies array to be: [updateImage, dispatch, listItemId, handleClose, enqueueSnackbar]",{"range":"273","text":"274"},"Update the dependencies array to be: []",{"range":"275","text":"276"},[7875,7909],"[currentItemOptions, dispatch, quizListId, questionId]",[8451,8473],"[currentItemOptions?.questions, dispatch, quizListId]",[3162,3171],"[checked, dispatch, id]",[5607,5609],"[dispatch, id]",[2155,2198],"[dispatch, description2, id]",[2491,2495],[2202,2255],"[updateImage, dispatch, listItemId, handleClose, enqueueSnackbar]",[3569,3600],"[]"]